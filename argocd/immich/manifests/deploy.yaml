apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-config
data:
  DB_HOSTNAME: postgres
  DB_DATABASE_NAME: immich
  DB_USERNAME: marcus
  REDIS_HOSTNAME: "redis"
  REDIS_PORT: "6379"
  MACHINE_LEARNING_PRELOAD__CLIP: "ViT-L-16-SigLIP-256__webli"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: immich-server
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      runtimeClassName: nvidia
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - marcus-server
      containers:
        - name: immich-server
          command: ["sleep inf"]
          envFrom:
            - configMapRef:
                name: immich-config
            - secretRef:
                name: immich-secrets
          image: ghcr.io/immich-app/immich-server:v1.136.0
          ports:
            - containerPort: 2283
              protocol: TCP
            - containerPort: 3000
              protocol: TCP
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              nvidia.com/gpu: "1"
              memory: 500Mi
              cpu: 100m
            limits:
              nvidia.com/gpu: "1"
              memory: 4Gi
              cpu: 1000m
          volumeMounts:
            - name: photos
              mountPath: /usr/src/app/upload
      volumes:
        - name: photos
          hostPath:
            path: /fast-k8s/Photos/immich
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: immich-machine-learning
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      runtimeClassName: nvidia
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - marcus-server
      containers:
        - name: immich-machine-learning
          envFrom:
            - configMapRef:
                name: immich-config
            - secretRef:
                name: immich-secrets
          image: ghcr.io/immich-app/immich-machine-learning:v1.136.0-cuda
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: photos
              mountPath: /usr/src/app/upload
            - name: model-cache
              mountPath: /cache
          resources:
            requests:
              nvidia.com/gpu: "1"
              memory: "2Gi"
              cpu: 50m
            limits:
              nvidia.com/gpu: "1"
              memory: "4Gi"
              cpu: 100m
      volumes:
        - name: photos
          hostPath:
            path: /fast-k8s/Photos/immich
        - name: model-cache
          hostPath:
            path: /fast-k8s/immich/model-cache
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: redis
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - image: docker.io/valkey/valkey:8-bookworm@sha256:facc1d2c3462975c34e10fccb167bfa92b0e0dbd992fc282c29a61c3243afb11
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
            - containerPort: 6379
              protocol: TCP
          resources:
            requests:
              memory: 10Mi
              cpu: 30m
            limits:
              memory: 50Mi
              cpu: 100m 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - marcus-server
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_DATABASE_NAME
            - name: POSTGRES_INITDB_ARGS
              value: "--data-checksums"
            - name: DB_STORAGE_TYPE
              value: "SSD"
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: DB_PASSWORD
          image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:32324a2f41df5de9efe1af166b7008c3f55646f8d0e00d9550c16c9822366b4a
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" || exit 1;
                  Chksum="$(psql --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
                  echo "checksum failure count is $$Chksum";
                  [ "$Chksum" = '0' ] || exit 1
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}"
            initialDelaySeconds: 5
            periodSeconds: 10
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          name: postgres
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: db
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: 500Mi
              cpu: 100m
            limits:
              memory: 1Gi
              cpu: 300m
      volumes:
        - name: db
          hostPath:
            path: /fast-k8s/immich/db
---

