apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  serviceName: postgres
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      # securityContext:
      #   runAsUser: 1000
      #   runAsGroup: 1000
      #   fsGroup: 1000
      containers:
        - name: postgres
          # command: ["sleep", "inf"]
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_DATABASE_NAME
            - name: POSTGRES_INITDB_ARGS
              value: "--data-checksums"
            - name: DB_STORAGE_TYPE
              value: "SSD"
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: DB_PASSWORD
          image: harbor.yanello.net/ghcr-cache/immich-app/postgres:16-vectorchord0.4.3-pgvectors0.8.1@sha256:5b434f184ec644c4e1a4076e2e7d4bee45631646a52e956b5ff74ac51e79cc00
          imagePullPolicy: IfNotPresent
          # livenessProbe:
          #   exec:
          #     command:
          #       - sh
          #       - -c
          #       - |
          #         pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" || exit 1;
          #         Chksum="$(psql --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
          #         echo "checksum failure count is $$Chksum";
          #         [ "$Chksum" = '0' ] || exit 1
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   exec:
          #     command:
          #       - sh
          #       - -c
          #       - pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}"
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            # - name: postgres-data
            #   mountPath: /var/lib/postgresql/data
            - name: pg-data
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: 500Mi
              cpu: 100m
            limits:
              memory: 4Gi
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: longhorn-xfs
        resources:
          requests:
            storage: 10Gi
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: pg-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: truenas-ssd
        resources:
          requests:
            storage: 10Gi
---

