apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr
  labels:
    app: bazarr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: bazarr
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
        cpu.performance: high
      containers:
        - env:
            - name: PGID
              value: "1000"
            - name: PUID
              value: "1000"
            - name: TZ
              value: America/Chicago
            - name: DOCKER_MODS
              value: wayller/bazarr-mod-subsync:latest
          image: linuxserver/bazarr:1.5.2@sha256:2458b13b6bdb9beee13acd2c70172140e9f9362488914d9f7cd95a473c3742b7
          imagePullPolicy: IfNotPresent
          name: bazarr
          resources:
            limits:
              cpu: 500m
              memory: 750Mi
            requests:
              cpu: 100m
              memory: 400Mi
          ports:
            - containerPort: 6767
              protocol: TCP
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /data/media/Movies
              name: movies
            - mountPath: /data/media/TV
              name: tv
          startupProbe:
            httpGet:
              path: /
              port: 6767
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 6767
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: config
          hostPath:
            path: /zpool/k8s/bazarr/config
          # persistentVolumeClaim:
          #   claimName: config
        - name: movies
          hostPath:
            path: /data/media/Movies
          # nfs:
          #   server: marcus-server.lan
          #   path: /data/media/Movies
        - name: tv
          hostPath:
            path: /data/media/TV
          # nfs:
          #   server: marcus-server.lan
          #   path: /data/media/TV