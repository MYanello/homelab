apiVersion: v1
metadata:
  name: resume-config 
data:
  DB_DATABASE_NAME: postgres
  DB_HOSTNAME: postgres
  DB_USERNAME: postgres
kind: ConfigMap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rx-resume
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: rx-resume
  template:
    metadata:
      labels:
        app: rx-resume
    spec:
      containers:
      - name: rx-resume
        image: amruthpillai/reactive-resume:v4.1.8@sha256:207aa74f9ee949307278a0a043904184dc3d4709dab95aa1ab21f346271d64ae
        ports:
        - containerPort: 3010
        env:
        - name: PORT
          value: "3010"
        - name: PUBLIC_URL
          value: "https://rxresume.yanello.net"
        - name: CHROME_TOKEN
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: TOKEN
        - name: CHROME_URL
          value: "ws://localhost:3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: DATABASE_URL
        # - name: MAIL_FROM
        #   value: "example@example.com"
        # - name: SMTP_URL
        #   value: "smtp://...:587"
        - name: DISABLE_SIGNUPS
          value: "false"
        - name: DISABLE_EMAIL_AUTH
          value: "false"
        - name: STORAGE_ENDPOINT
          value: "localhost"
        - name: STORAGE_REGION
          value: "us-east-1"
        - name: STORAGE_BUCKET
          value: "default"
        - name: STORAGE_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: MINIO_ROOT_USER
        - name: STORAGE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: MINIO_ROOT_PASSWORD
        - name: STORAGE_USE_SSL
          value: "false"
        - name: SKIP_BUCKET_CHECK
          value: "false"
        - name: STORAGE_PORT
          value: "9000"
        - name: STORAGE_URL
          value: "https://minio.yanello.net/default"
        - name: ACCESS_TOKEN_SECRET
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: ACCESS_TOKEN_SECRET
        - name: REFRESH_TOKEN_SECRET
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: REFRESH_TOKEN_SECRET
        # resources:
        #   limits:
        #     cpu: 1000m
        #     memory: 2048Mi
        #   requests:
        #     cpu: 1000m
        #     memory: 2048Mi

      - name: rx-chrome
        image: ghcr.io/browserless/chromium:latest@sha256:8f9ec76151ca7b105bd260c8ab7dd047c819936874c997885805d7ff6a44339f
        ports:
        - containerPort: 3000
        env:
        - name: TIMEOUT
          value: "300000"
        - name: CONCURRENT
          value: "10"
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: TOKEN
        - name: EXIT_ON_HEALTH_FAILURE
          value: "false"
        - name: PRE_REQUEST_HEALTH_CHECK
          value: "false"
        # resources:
        #   limits:
        #     cpu: 2000m
        #     memory: 4096Mi
        #   requests:
        #     cpu: 2000m
        #     memory: 4096Mi

      - name: rx-resume-s3
        image: minio/minio:latest@sha256:640c22768ed5dbc92eacc14502a1b06a1c708fa60431345c78dfc22917062e93
        args:
        - server
        - /data
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: MINIO_ROOT_USER
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: resume-secrets
              key: MINIO_ROOT_PASSWORD
        ports:
        - name: s3
          containerPort: 9000
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /data
          name: assets-storage
        # resources:
        #   limits:
        #     cpu: 1000m
        #     memory: 2048Mi
        #   requests:
        #     cpu: 1000m
        #     memory: 2048Mi

      volumes:
      - name: assets-storage
        persistentVolumeClaim:
          claimName: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: resume-config
                  key: DB_DATABASE_NAME
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: resume-config
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: resume-secrets
                  key: DB_PASSWORD
          image: postgres:15-alpine@sha256:a58cec2ba7a60b4c08d51f2ca93c1ad65fbf96e75cf0c89b7c0d2684860d3bb3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" || exit 1;
                  Chksum="$(psql --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
                  echo "checksum failure count is $$Chksum";
                  [ "$Chksum" = '0' ] || exit 1
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}"
            initialDelaySeconds: 5
            periodSeconds: 10
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          name: postgres
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: db
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: db
          persistentVolumeClaim:
            claimName: db
---