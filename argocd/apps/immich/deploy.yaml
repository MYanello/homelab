apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-config
data:
  DB_HOSTNAME: postgres
  DB_DATABASE_NAME: immich
  DB_USERNAME: marcus
  REDIS_HOSTNAME: "redis"
  REDIS_PORT: "6379"
  MACHINE_LEARNING_PRELOAD__CLIP: "ViT-L-16-SigLIP-256__webli"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: immich-server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      runtimeClassName: nvidia
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - marcus-server
      containers:
        - name: immich-server
          envFrom:
            - configMapRef:
                name: immich-config
            - secretRef:
                name: immich-secrets
          image: ghcr.io/immich-app/immich-server:release@sha256:217cddb1e0fa3f4878e1573fe1fd4b9dc24f737015cc5c917910787a5ec0f85e
          ports:
            - containerPort: 2283
              protocol: TCP
            - containerPort: 3000
              protocol: TCP
          imagePullPolicy: Always
          resources:
            requests:
              nvidia.com/gpu: '1'
            limits:
              nvidia.com/gpu: '1'
          volumeMounts:
            - name: photos
              mountPath: /usr/src/app/upload
      volumes:
        - name: photos
          hostPath:
            path: /zpool/Photos/immich
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: immich-machine-learning
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      runtimeClassName: nvidia
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - marcus-server
      containers:
        - name: immich-machine-learning
          envFrom:
            - configMapRef:
                name: immich-config
            - secretRef:
                name: immich-secrets
          image: ghcr.io/immich-app/immich-machine-learning:release-cuda@sha256:4cc88e53a2a69aa571255a1370a2f96adcc97b7f607b2c118d8aaa02692ce40c
          imagePullPolicy: Always
          volumeMounts:
            - name: photos
              mountPath: /usr/src/app/upload
            - name: model-cache
              mountPath: /cache
          resources:
            requests:
              nvidia.com/gpu: '1'
            limits:
              nvidia.com/gpu: '1'
      volumes:
        - name: photos
          hostPath:
            path: /zpool/Photos/immich
        - name: model-cache
          hostPath:
            path: /zpool/k8s/immich/model-cache
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: typesense
  labels:
    app: typesense
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: typesense
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: typesense
    spec:
      containers:
        - env:
            - name: TYPESENSE_DATA_DIR
              value: /data
          envFrom:
            - secretRef:
                name: immich-secrets
          image: typesense/typesense:0.24.0@sha256:3cc1251f09ef6c75a5b1f2751c04e7265c770c0f2b69cba1f9a9f20da57cfa28
          imagePullPolicy: IfNotPresent
          name: typesense
          volumeMounts:
            - name: tsdata
              mountPath: /data
      volumes:
        - name: tsdata
          hostPath: 
            path: /zpool/k8s/immich/tsdata

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - image: docker.io/redis:6.2-alpine@sha256:905c4ee67b8e0aa955331960d2aa745781e6bd89afc44a8584bfd13bc890f0ae
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
            - containerPort: 6379
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - marcus-server
      securityContext:
        runAsUser: 1000 
        runAsGroup: 1000 
        fsGroup: 1000 
      containers:
        - env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_DATABASE_NAME
            - name: POSTGRES_INITDB_ARGS
              value: '--data-checksums'
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_USERNAME
            # - name: DB_DATA_LOCATION
            #   value: /var/lib/postgresql/data
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: DB_PASSWORD
          image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" || exit 1;
                  Chksum="$(psql --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
                  echo "checksum failure count is $$Chksum";
                  [ "$Chksum" = '0' ] || exit 1
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready --dbname="${POSTGRES_DB}" --username="${POSTGRES_USER}"
            initialDelaySeconds: 5
            periodSeconds: 10
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          name: postgres
          ports:
            - containerPort: 5432
              protocol: TCP
          command: 
            - postgres
            - -c
            - shared_preload_libraries=vectors.so
            - -c
            - 'search_path="$user", public, vectors'
            - -c
            - logging_collector=on
            - -c
            - max_wal_size=2GB
            - -c
            - shared_buffers=512MB
            - -c
            - wal_compression=on
          volumeMounts:
            - name: db
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: db
          hostPath:
            path: /zpool/k8s/immich/db
---